name: Deploy to Server

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Устанавливаем JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Устанавливаем Docker и Docker Compose
      - name: Install Docker and Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

      # Генерируем .env файл из секретов
      - name: Create .env file
        run: |
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          MEXC_API_KEY=${{ secrets.MEXC_API_KEY }}
          MEXC_SECRET_KEY=${{ secrets.MEXC_SECRET_KEY }}
          SERVER_HOST=${{ secrets.SERVER_HOST }}
          SERVER_USER=${{ secrets.SERVER_USER }}
          SSH_PRIVATE_KEY=${{ secrets.SSH_PRIVATE_KEY }}
          EOF

      # Собираем JAR
      - name: Build with Gradle
        run: ./gradlew shadowJar

      # Собираем Docker образ
      - name: Build Docker image
        run: docker-compose build

      # Сохраняем образ в artifact
      - name: Save Docker image
        run: docker save $(docker-compose images | awk 'NR==3 {print $2}') -o image.tar
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

      # Деплой на сервер
      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Создаем volume для PostgreSQL если его нет
            docker volume ls -q | grep -q postgres_data || docker volume create postgres_data
            
            # Получаем и загружаем образ
            mkdir -p ~/crypto-backend-ktor
            cd ~/crypto-backend-ktor
            docker load -i image.tar
            
            # Запускаем приложение
            docker-compose down
            docker-compose up -d